% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dido-csv.R
\name{dido_read_delim}
\alias{dido_read_delim}
\title{Lit un fichier CSV}
\usage{
dido_read_delim(
  file,
  delim = NULL,
  quote = "\\"",
  escape_backslash = FALSE,
  escape_double = TRUE,
  locale = readr::default_locale(),
  comment = "",
  trim_ws = FALSE,
  skip = 0,
  n_max = Inf,
  skip_empty_rows = TRUE
)
}
\arguments{
\item{file}{Either a path to a file, a connection, or literal data
(either a single string or a raw vector).

Files ending in \code{.gz}, \code{.bz2}, \code{.xz}, or \code{.zip} will
be automatically uncompressed. Files starting with \verb{http://},
\verb{https://}, \verb{ftp://}, or \verb{ftps://} will be automatically
downloaded. Remote gz files can also be automatically downloaded and
decompressed.

Literal data is most useful for examples and tests. To be recognised as
literal data, the input must be either wrapped with \code{I()}, be a string
containing at least one new line, or be a vector containing at least one
string with a new line.

Using a value of \code{\link[readr:clipboard]{clipboard()}} will read from the system clipboard.}

\item{delim}{Single character used to separate fields within a record.}

\item{quote}{Single character used to quote strings.}

\item{escape_backslash}{Does the file use backslashes to escape special
characters? This is more general than \code{escape_double} as backslashes
can be used to escape the delimiter character, the quote character, or
to add special characters like \verb{\\\\n}.}

\item{escape_double}{Does the file escape quotes by doubling them?
i.e. If this option is \code{TRUE}, the value \verb{""""} represents
a single quote, \verb{\\"}.}

\item{locale}{The locale controls defaults that vary from place to place.
The default locale is US-centric (like R), but you can use
\code{\link[readr:locale]{locale()}} to create your own locale that controls things like
the default time zone, encoding, decimal mark, big mark, and day/month
names.}

\item{comment}{A string used to identify comments. Any text after the
comment characters will be silently ignored.}

\item{trim_ws}{Should leading and trailing whitespace (ASCII spaces and tabs) be trimmed from
each field before parsing it?}

\item{skip}{Number of lines to skip before reading data. If \code{comment} is
supplied any commented lines are ignored \emph{after} skipping.}

\item{n_max}{Maximum number of lines to read.}

\item{skip_empty_rows}{Should blank rows be ignored altogether? i.e. If this
option is \code{TRUE} then blank rows will not be represented at all.  If it is
\code{FALSE} then they will be represented by \code{NA} values in all the columns.}
}
\value{
un tibble dont toutes les colonnes sont de type \code{chr}
}
\description{
Cette fonction utilise directement \code{readr::read_delim} en enlevant la
détection du type des colonnes.
}
\details{
Certaines variables peuvent avoir des valeurs secrétisées
représentées par la valeur \code{secret}, la détection automatique de readr
n'est donc pas fiable et est désactivé à ce niveau. La détection
automatique est faite dans la fonction \code{dido_csv()}.
}
\examples{
\dontrun{
data <- dido_read_delim("vignettes/exemple.csv")
}
}
